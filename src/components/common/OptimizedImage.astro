import { getImagePath, optimizeImageSrc } from '../../utils/image-utils';

interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  class?: string;
  fallback?: string;
}

const { 
  src, 
  alt, 
  width, 
  height, 
  class: className = '', 
  fallback = '/images/placeholder.jpg' 
} = Astro.props;

const imagePath = getImagePath(src, fallback);
const optimizedSrc = optimizeImageSrc(imagePath, width, height);

// Generate a unique ID for this image
const imageId = `img-${Math.random().toString(36).substring(2, 9)}`;

<div class={`image-container ${className}`}>
  <img 
    id={imageId}
    src={optimizedSrc}
    alt={alt}
    width={width}
    height={height}
    class="w-full h-full object-cover opacity-0 transition-opacity duration-300"
    loading="lazy"
  />
  <div class="image-placeholder absolute inset-0 bg-gray-200 dark:bg-gray-700 animate-pulse"></div>
</div>

<style>
.image-container {
  position: relative;
  overflow: hidden;
}
</style>

<script define:vars={{ imageId, fallback }}>
document.addEventListener('DOMContentLoaded', () => {
  const img = document.getElementById(imageId);
  if (img) {
    img.onload = function() {
      this.classList.remove('opacity-0');
      this.classList.add('opacity-100');
      const placeholder = this.nextElementSibling;
      if (placeholder) placeholder.style.display = 'none';
    };
    
    img.onerror = function() {
      this.onerror = null;
      this.src = fallback;
    };
  }
});
</script> 