---
import RagQA from '../components/RagQA.jsx'
import { siteConfig } from '../config'
import BaseLayout from '../layouts/BaseLayout.astro'
---

<BaseLayout title={`Data AI Engineering Dashboard | ${siteConfig.title}`}>
  <!-- Hero Section -->
  <section class="py-20 bg-gradient-to-r from-slate-700 to-blue-900 text-white">
    <div class="container mx-auto px-4">
      <div class="max-w-3xl mx-auto text-center">
        <h1 class="text-4xl md:text-5xl font-bold mb-6">Data AI Engineering Excellence</h1>
        <p class="text-xl opacity-90 mb-8">
          Transforming Complex Data into Actionable Insights with AI Precision.
        </p>
        <div class="relative">
          <svg class="absolute inset-0 w-full h-full opacity-20" viewBox="0 0 800 400" xmlns="http://www.w3.org/2000/svg">
            <path class="data-flow-line" d="M100,200 C200,100 300,300 400,200 C500,100 600,300 700,200" stroke="#ffffff" stroke-width="2" fill="none" />
            <path class="data-flow-line" d="M100,220 C200,320 300,120 400,220 C500,320 600,120 700,220" stroke="#ffffff" stroke-width="2" fill="none" />
            <path class="data-flow-line" d="M100,180 C200,80 300,280 400,180 C500,80 600,280 700,180" stroke="#ffffff" stroke-width="2" fill="none" />
          </svg>
        </div>
        <a href="#introduction" class="inline-block mt-8 px-6 py-3 bg-blue-600 hover:bg-blue-700 rounded-lg transition-colors duration-300 font-medium">
          Discover My Work
        </a>
      </div>
    </div>
  </section>

  <!-- Introduction Section -->
  <section id="introduction" class="py-16 bg-gray-50 dark:bg-gray-900">
    <div class="container mx-auto px-4">
      <div class="max-w-4xl mx-auto">
        <div class="bg-white dark:bg-gray-800 p-8 rounded-lg shadow-lg">
          <h2 class="text-3xl font-bold mb-6 text-slate-800 dark:text-white">Introduction</h2>
          <p class="text-lg text-gray-700 dark:text-gray-300 mb-4">
            This dashboard showcases my expertise in designing scalable data pipelines, optimizing performance with AI, and delivering impactful solutions across industries.
          </p>
          <p class="text-lg text-gray-700 dark:text-gray-300">
            Through interactive visualizations and real-world examples, you'll explore how I leverage cutting-edge technologies to transform complex data challenges into valuable business insights.
          </p>
        </div>
      </div>
    </div>
  </section>

  <!-- Interactive ETL Pipeline Workflow -->
  <section class="py-16 bg-white dark:bg-gray-800">
    <div class="container mx-auto px-4">
      <div class="max-w-5xl mx-auto">
        <h2 class="text-3xl font-bold mb-4 text-center text-slate-800 dark:text-white">Interactive ETL Pipeline Workflow</h2>
        <p class="text-center mb-12 text-gray-600 dark:text-gray-400 max-w-3xl mx-auto">
          Explore this interactive visualization of a modern ETL (Extract, Transform, Load) pipeline, demonstrating how I design and implement data workflows for enterprise-scale applications.
        </p>
        
        <div class="bg-gray-50 dark:bg-gray-900 p-6 rounded-lg shadow-lg">
          <div id="etl-pipeline-viz" class="w-full h-[500px] flex items-center justify-center">
            <p class="text-gray-500 dark:text-gray-400">Loading visualization...</p>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Dashboard Introduction -->
  <section class="py-12 bg-white dark:bg-gray-900">
    <div class="container mx-auto px-4">
      <div class="max-w-4xl mx-auto">
        <div class="bg-blue-50 dark:bg-blue-900/30 p-6 rounded-lg mb-8">
          <h2 class="text-2xl font-bold mb-4 text-blue-700 dark:text-blue-300">About This Dashboard</h2>
          <p class="text-gray-700 dark:text-gray-300">
            This interactive dashboard demonstrates my expertise in data visualization and analytics. The visualizations below are built using D3.js and showcase various aspects of data engineering workflows, ETL processes, and business intelligence insights.
          </p>
        </div>
      </div>
    </div>
  </section>

  <!-- Data Processing Metrics -->
  <section class="py-12 bg-white dark:bg-gray-900">
    <div class="container mx-auto px-4">
      <div class="max-w-4xl mx-auto">
        <h2 class="text-3xl font-bold mb-8 text-center text-slate-800 dark:text-white">Data Processing Performance</h2>
        <p class="text-center mb-8 text-gray-600 dark:text-gray-400">
          Visualization of performance improvements achieved through data pipeline optimization.
        </p>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
          <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg">
            <h3 class="text-xl font-bold mb-4 text-center">Processing Time Reduction</h3>
            <div id="processing-time-viz" class="w-full h-[300px] flex items-center justify-center">
              <p class="text-gray-500 dark:text-gray-400">Loading visualization...</p>
            </div>
          </div>
          
          <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg">
            <h3 class="text-xl font-bold mb-4 text-center">Dashboard Loading Time</h3>
            <div id="dashboard-time-viz" class="w-full h-[300px] flex items-center justify-center">
              <p class="text-gray-500 dark:text-gray-400">Loading visualization...</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Performance Optimization: Annotated Line Chart -->
  <section class="py-12 bg-gray-50 dark:bg-gray-800">
    <div class="container mx-auto px-4">
      <div class="max-w-4xl mx-auto">
        <h2 class="text-3xl font-bold mb-4 text-center text-slate-800 dark:text-white">Performance Optimization</h2>
        <p class="text-center mb-8 text-gray-600 dark:text-gray-400 max-w-3xl mx-auto">
          Explore how I've optimized data processing performance through innovative techniques and architectural improvements.
        </p>
        
        <div class="bg-white dark:bg-gray-900 p-6 rounded-lg shadow-lg">
          <div class="flex justify-between items-center mb-6">
            <h3 class="text-xl font-bold text-slate-800 dark:text-white">Query Runtime Optimization</h3>
            <div class="relative">
              <select id="performance-metric-selector" class="bg-gray-50 dark:bg-gray-800 border border-gray-300 dark:border-gray-700 text-gray-900 dark:text-white text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5">
                <option value="runtime" selected>Query Runtime</option>
                <option value="cpu">CPU Usage</option>
                <option value="memory">Memory Consumption</option>
                <option value="cost">Cost Efficiency</option>
              </select>
            </div>
          </div>
          
          <div id="performance-chart" class="w-full h-[400px] flex items-center justify-center">
            <p class="text-gray-500 dark:text-gray-400">Loading visualization...</p>
          </div>
          
          <div class="mt-4 p-4 bg-blue-50 dark:bg-blue-900/30 rounded-lg">
            <h4 class="font-bold text-blue-700 dark:text-blue-300 mb-2">Optimization Insights</h4>
            <p class="text-gray-700 dark:text-gray-300" id="optimization-insight">
              The implementation of advanced query optimization techniques and data partitioning strategies resulted in a 30% reduction in query runtime, significantly improving user experience and reducing infrastructure costs.
            </p>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Data Volume Visualization -->
  <section class="py-12 bg-gray-50 dark:bg-gray-800">
    <div class="container mx-auto px-4">
      <div class="max-w-4xl mx-auto">
        <h2 class="text-3xl font-bold mb-4 text-center text-slate-800 dark:text-white">Data Volume Analysis</h2>
        <p class="text-center mb-8 text-gray-600 dark:text-gray-400 max-w-3xl mx-auto">
          Explore the scale and composition of data processed across different projects, showcasing my experience with large-scale data engineering.
        </p>
        
        <div class="bg-white dark:bg-gray-900 p-6 rounded-lg shadow-lg">
          <div class="flex justify-between items-center mb-6">
            <h3 class="text-xl font-bold text-slate-800 dark:text-white">Project Data Volumes</h3>
            <div id="data-volume-summary" class="px-4 py-2 bg-blue-100 dark:bg-blue-900/50 rounded-lg text-blue-800 dark:text-blue-200 font-medium">
              Total Processed: 14.1 TB
            </div>
          </div>
          
          <div id="data-volume-viz" class="w-full h-[400px] flex items-center justify-center">
            <p class="text-gray-500 dark:text-gray-400">Loading visualization...</p>
          </div>
          
          <div class="mt-4 flex items-center justify-center space-x-8">
            <div class="flex items-center">
              <div class="w-4 h-4 bg-blue-500 rounded mr-2"></div>
              <span class="text-sm text-gray-700 dark:text-gray-300">Structured Data</span>
            </div>
            <div class="flex items-center">
              <div class="w-4 h-4 bg-gray-400 rounded mr-2"></div>
              <span class="text-sm text-gray-700 dark:text-gray-300">Unstructured Data</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Skills Radar Chart -->
  <section class="py-12 bg-white dark:bg-gray-900">
    <div class="container mx-auto px-4">
      <div class="max-w-4xl mx-auto">
        <h2 class="text-3xl font-bold mb-4 text-center text-slate-800 dark:text-white">Technical Expertise</h2>
        <p class="text-center mb-8 text-gray-600 dark:text-gray-400 max-w-3xl mx-auto">
          Explore my technical skills across various domains, from programming languages to cloud platforms and data engineering tools.
        </p>
        
        <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg">
          <div class="flex justify-between items-center mb-6">
            <h3 class="text-xl font-bold text-slate-800 dark:text-white">Skill Matrix</h3>
            <div class="relative">
              <select id="skill-category-filter" class="bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5">
                <option value="all" selected>All Categories</option>
                <option value="programming">Programming</option>
                <option value="cloud">Cloud & Infrastructure</option>
                <option value="data">Data Engineering</option>
                <option value="ai">AI & Machine Learning</option>
              </select>
            </div>
          </div>
          
          <div id="skills-matrix-viz" class="w-full h-[500px] flex items-center justify-center">
            <p class="text-gray-500 dark:text-gray-400">Loading visualization...</p>
          </div>
          
          <div class="mt-4 flex items-center justify-center space-x-6">
            <div class="flex items-center">
              <div class="w-4 h-4 bg-blue-200 rounded mr-2"></div>
              <span class="text-sm text-gray-700 dark:text-gray-300">Beginner</span>
            </div>
            <div class="flex items-center">
              <div class="w-4 h-4 bg-blue-300 rounded mr-2"></div>
              <span class="text-sm text-gray-700 dark:text-gray-300">Intermediate</span>
            </div>
            <div class="flex items-center">
              <div class="w-4 h-4 bg-blue-500 rounded mr-2"></div>
              <span class="text-sm text-gray-700 dark:text-gray-300">Advanced</span>
            </div>
            <div class="flex items-center">
              <div class="w-4 h-4 bg-blue-700 rounded mr-2"></div>
              <span class="text-sm text-gray-700 dark:text-gray-300">Expert</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- AI-Driven Feature: RAG-Powered Q&A -->
  <section class="py-16 bg-gray-50 dark:bg-gray-800">
    <div class="container mx-auto px-4">
      <div class="max-w-4xl mx-auto">
        <h2 class="text-3xl font-bold mb-4 text-center text-slate-800 dark:text-white">AI-Powered Knowledge Base</h2>
        <p class="text-center mb-8 text-gray-600 dark:text-gray-400 max-w-3xl mx-auto">
          Interact with this RAG-powered Q&A system to learn more about my data engineering expertise, AI implementations, and technical approaches.
        </p>
        
        <div id="rag-qa-container">
          <RagQA client:load />
        </div>
      </div>
    </div>
  </section>
</BaseLayout>

<!-- Load D3.js first -->
<script is:inline src="https://d3js.org/d3.v7.min.js"></script>

<!-- Hero animations script -->
<script is:inline>
  window.addEventListener('load', () => {
    // Initialize the SVG animations in the hero section
    initHeroAnimations();
  });

  // Function to animate the SVG paths in the hero section
  function initHeroAnimations() {
    const dataFlowLines = document.querySelectorAll('.data-flow-line');
    
    dataFlowLines.forEach((line, index) => {
      // Add animation with different delays for each line
      line.setAttribute('stroke-dasharray', '1000');
      line.setAttribute('stroke-dashoffset', '1000');
      
      // Create animation
      const animation = document.createElementNS('http://www.w3.org/2000/svg', 'animate');
      animation.setAttribute('attributeName', 'stroke-dashoffset');
      animation.setAttribute('from', '1000');
      animation.setAttribute('to', '0');
      animation.setAttribute('dur', '3s');
      animation.setAttribute('begin', `${index * 0.5}s`);
      animation.setAttribute('fill', 'freeze');
      animation.setAttribute('repeatCount', 'indefinite');
      
      line.appendChild(animation);
    });
  }
</script>

<!-- ETL Pipeline Visualization script -->
<script is:inline>
  window.addEventListener('load', () => {
    console.log("Window loaded, initializing ETL Pipeline Visualization");
    // Initialize the ETL Pipeline Visualization
    initETLPipelineViz();
  });

  // Function to initialize the ETL Pipeline Visualization
  function initETLPipelineViz() {
    console.log("Running ETL Pipeline Visualization");
    // Sample data for the ETL pipeline
    const nodes = [
      { id: "data_sources", name: "Data Sources", type: "source", description: "Multiple data sources including APIs, databases, and file systems" },
      { id: "extract", name: "Extract", type: "process", description: "Data extraction using Apache Nifi and custom connectors" },
      { id: "raw_storage", name: "Raw Storage", type: "storage", description: "Raw data lake storage in S3/ADLS" },
      { id: "transform", name: "Transform", type: "process", description: "Data transformation using Spark and Python" },
      { id: "quality", name: "Quality Check", type: "process", description: "Data quality validation with Great Expectations" },
      { id: "processed", name: "Processed Data", type: "storage", description: "Processed data in optimized formats" },
      { id: "load", name: "Load", type: "process", description: "Data loading to target systems" },
      { id: "warehouse", name: "Data Warehouse", type: "destination", description: "Enterprise data warehouse for analytics" },
      { id: "ml", name: "ML Models", type: "destination", description: "Machine learning model training and inference" }
    ];

    const links = [
      { source: "data_sources", target: "extract", value: 5 },
      { source: "extract", target: "raw_storage", value: 5 },
      { source: "raw_storage", target: "transform", value: 5 },
      { source: "transform", target: "quality", value: 5 },
      { source: "quality", target: "processed", value: 4 },
      { source: "processed", target: "load", value: 4 },
      { source: "load", target: "warehouse", value: 3 },
      { source: "load", target: "ml", value: 2 }
    ];

    // Get the container dimensions
    const container = document.getElementById('etl-pipeline-viz');
    if (!container) {
      console.error("ETL Pipeline container not found");
      return;
    }
    
    console.log("Container found:", container);
    const width = container.clientWidth;
    const height = container.clientHeight;

    // Clear any existing SVG
    d3.select('#etl-pipeline-viz').selectAll('*').remove();

    // Create SVG
    const svg = d3.select('#etl-pipeline-viz')
      .append('svg')
      .attr('width', width)
      .attr('height', height)
      .attr('viewBox', [0, 0, width, height])
      .attr('style', 'max-width: 100%; height: auto;');

    // Create a force simulation
    const simulation = d3.forceSimulation(nodes)
      .force('link', d3.forceLink(links).id(d => d.id).distance(100))
      .force('charge', d3.forceManyBody().strength(-400))
      .force('center', d3.forceCenter(width / 2, height / 2))
      .force('x', d3.forceX(width / 2).strength(0.1))
      .force('y', d3.forceY(height / 2).strength(0.1));

    // Define node colors based on type
    const nodeColors = {
      source: '#4A90E2',      // Blue
      process: '#9B59B6',     // Purple
      storage: '#F1C40F',     // Yellow
      destination: '#E91E63'  // Pink
    };

    // Create a group for the links
    const link = svg.append('g')
      .selectAll('line')
      .data(links)
      .join('line')
      .attr('stroke', '#999')
      .attr('stroke-opacity', 0.6)
      .attr('stroke-width', d => Math.sqrt(d.value));

    // Create a group for the nodes
    const node = svg.append('g')
      .selectAll('g')
      .data(nodes)
      .join('g')
      .call(drag(simulation));

    // Add circles to each node
    node.append('circle')
      .attr('r', 20)
      .attr('fill', d => nodeColors[d.type])
      .attr('stroke', '#fff')
      .attr('stroke-width', 1.5);

    // Add text labels to each node
    node.append('text')
      .attr('text-anchor', 'middle')
      .attr('dy', 30)
      .text(d => d.name)
      .attr('fill', '#333')
      .attr('font-size', '12px')
      .attr('font-weight', 'bold');

    // Create tooltip
    const tooltip = d3.select('#etl-pipeline-viz')
      .append('div')
      .attr('class', 'tooltip')
      .style('position', 'absolute')
      .style('visibility', 'hidden')
      .style('background-color', 'white')
      .style('border', '1px solid #ddd')
      .style('border-radius', '4px')
      .style('padding', '10px')
      .style('box-shadow', '0 2px 4px rgba(0,0,0,0.1)')
      .style('font-size', '12px')
      .style('max-width', '200px')
      .style('z-index', '10');

    // Add tooltip behavior
    node.on('mouseover', function(event, d) {
      tooltip
        .style('visibility', 'visible')
        .html(`<strong>${d.name}</strong><br/>${d.description}`);
    })
    .on('mousemove', function(event) {
      tooltip
        .style('top', (event.pageY - 10) + 'px')
        .style('left', (event.pageX + 10) + 'px');
    })
    .on('mouseout', function() {
      tooltip.style('visibility', 'hidden');
    });

    // Add click behavior for nodes
    node.on('click', function(event, d) {
      // Prevent event from propagating
      event.stopPropagation();
      
      // Create a modal with more details
      const modalContent = `
        <div class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow-lg max-w-md mx-auto">
          <h3 class="text-xl font-bold mb-2">${d.name}</h3>
          <p class="mb-3">${d.description}</p>
          <div class="border-t pt-3 mt-3">
            <h4 class="font-bold mb-1">Example Implementation:</h4>
            <p>Project: Retail Analytics Pipeline</p>
            <p>Volume: 5TB daily processing</p>
            <p>Technologies: ${getTechnologies(d.type)}</p>
          </div>
          <button class="mt-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 close-modal">Close</button>
        </div>
      `;
      
      // Create modal container
      const modal = document.createElement('div');
      modal.className = 'fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50';
      modal.innerHTML = modalContent;
      document.body.appendChild(modal);
      
      // Add close functionality
      modal.querySelector('.close-modal').addEventListener('click', () => {
        document.body.removeChild(modal);
      });
      
      // Close when clicking outside the modal content
      modal.addEventListener('click', (e) => {
        if (e.target === modal) {
          document.body.removeChild(modal);
        }
      });
    });

    // Update positions on each tick of the simulation
    simulation.on('tick', () => {
      link
        .attr('x1', d => d.source.x)
        .attr('y1', d => d.source.y)
        .attr('x2', d => d.target.x)
        .attr('y2', d => d.target.y);

      node.attr('transform', d => `translate(${d.x},${d.y})`);
    });

    // Helper function to get technologies based on node type
    function getTechnologies(type) {
      switch(type) {
        case 'source':
          return 'REST APIs, JDBC, S3, SFTP';
        case 'process':
          return 'Apache Nifi, Spark, Python, Airflow';
        case 'storage':
          return 'S3, ADLS, Parquet, Delta Lake';
        case 'destination':
          return 'Snowflake, Redshift, TensorFlow, PyTorch';
        default:
          return 'Various technologies';
      }
    }

    // Drag functionality for nodes
    function drag(simulation) {
      function dragstarted(event) {
        if (!event.active) simulation.alphaTarget(0.3).restart();
        event.subject.fx = event.subject.x;
        event.subject.fy = event.subject.y;
      }
      
      function dragged(event) {
        event.subject.fx = event.x;
        event.subject.fy = event.y;
      }
      
      function dragended(event) {
        if (!event.active) simulation.alphaTarget(0);
        event.subject.fx = null;
        event.subject.fy = null;
      }
      
      return d3.drag()
        .on('start', dragstarted)
        .on('drag', dragged)
        .on('end', dragended);
    }
  }
</script>

<!-- Processing Time Visualization script -->
<script is:inline>
  window.addEventListener('load', () => {
    console.log("Initializing Processing Time Visualization");
    createProcessingTimeViz();
  });

  function createProcessingTimeViz() {
    const container = document.getElementById('processing-time-viz');
    if (!container) {
      console.error("Processing Time container not found");
      return;
    }
    
    console.log("Processing Time container found:", container);
    
    // Clear loading message
    container.innerHTML = '';
    
    const width = container.clientWidth;
    const height = container.clientHeight;
    const margin = { top: 40, right: 30, bottom: 60, left: 60 };
    
    const svg = d3.select(container)
      .append('svg')
      .attr('width', width)
      .attr('height', height)
      .attr('viewBox', `0 0 ${width} ${height}`)
      .attr('style', 'max-width: 100%; height: auto;');
    
    // Sample data
    const data = [
      { stage: 'Before Optimization', time: 100 },
      { stage: 'After Optimization', time: 70 }
    ];
    
    // Set up scales
    const x = d3.scaleBand()
      .domain(data.map(d => d.stage))
      .range([margin.left, width - margin.right])
      .padding(0.3);
    
    const y = d3.scaleLinear()
      .domain([0, d3.max(data, d => d.time) * 1.2])
      .range([height - margin.bottom, margin.top]);
    
    // Add bars
    svg.selectAll('.bar')
      .data(data)
      .enter()
      .append('rect')
      .attr('class', 'bar')
      .attr('x', d => x(d.stage))
      .attr('y', d => y(d.time))
      .attr('width', x.bandwidth())
      .attr('height', d => height - margin.bottom - y(d.time))
      .attr('fill', (d, i) => i === 0 ? '#F87171' : '#4ADE80');
    
    // Add value labels
    svg.selectAll('.label')
      .data(data)
      .enter()
      .append('text')
      .attr('class', 'label')
      .attr('x', d => x(d.stage) + x.bandwidth() / 2)
      .attr('y', d => y(d.time) - 10)
      .attr('text-anchor', 'middle')
      .attr('fill', '#4B5563')
      .text(d => `${d.time} min`);
    
    // Add axes
    svg.append('g')
      .attr('transform', `translate(0,${height - margin.bottom})`)
      .call(d3.axisBottom(x))
      .selectAll('text')
      .attr('font-size', '12px');
    
    svg.append('g')
      .attr('transform', `translate(${margin.left},0)`)
      .call(d3.axisLeft(y).ticks(5))
      .selectAll('text')
      .attr('font-size', '12px');
    
    // Add y-axis label
    svg.append('text')
      .attr('transform', 'rotate(-90)')
      .attr('x', -(height / 2))
      .attr('y', 20)
      .attr('text-anchor', 'middle')
      .attr('fill', '#4B5563')
      .attr('font-size', '12px')
      .text('Processing Time (minutes)');
    
    // Add improvement percentage
    const improvement = ((data[0].time - data[1].time) / data[0].time * 100).toFixed(0);
    
    svg.append('text')
      .attr('x', width / 2)
      .attr('y', height - 10)
      .attr('text-anchor', 'middle')
      .attr('fill', '#4B5563')
      .attr('font-size', '14px')
      .attr('font-weight', 'bold')
      .text(`${improvement}% Improvement`);
  }
</script>

<!-- Dashboard Time Visualization script -->
<script is:inline>
  window.addEventListener('load', () => {
    console.log("Initializing Dashboard Time Visualization");
    createDashboardTimeViz();
  });

  function createDashboardTimeViz() {
    const container = document.getElementById('dashboard-time-viz');
    if (!container) {
      console.error("Dashboard Time container not found");
      return;
    }
    
    console.log("Dashboard Time container found:", container);
    
    // Clear loading message
    container.innerHTML = '';
    
    const width = container.clientWidth;
    const height = container.clientHeight;
    const margin = { top: 40, right: 30, bottom: 60, left: 60 };
    
    const svg = d3.select(container)
      .append('svg')
      .attr('width', width)
      .attr('height', height)
      .attr('viewBox', `0 0 ${width} ${height}`)
      .attr('style', 'max-width: 100%; height: auto;');
    
    // Sample data
    const data = [
      { stage: 'Before Optimization', time: 8 },
      { stage: 'After Optimization', time: 6 }
    ];
    
    // Set up scales
    const x = d3.scaleBand()
      .domain(data.map(d => d.stage))
      .range([margin.left, width - margin.right])
      .padding(0.3);
    
    const y = d3.scaleLinear()
      .domain([0, d3.max(data, d => d.time) * 1.2])
      .range([height - margin.bottom, margin.top]);
    
    // Add bars
    svg.selectAll('.bar')
      .data(data)
      .enter()
      .append('rect')
      .attr('class', 'bar')
      .attr('x', d => x(d.stage))
      .attr('y', d => y(d.time))
      .attr('width', x.bandwidth())
      .attr('height', d => height - margin.bottom - y(d.time))
      .attr('fill', (d, i) => i === 0 ? '#F87171' : '#4ADE80');
    
    // Add value labels
    svg.selectAll('.label')
      .data(data)
      .enter()
      .append('text')
      .attr('class', 'label')
      .attr('x', d => x(d.stage) + x.bandwidth() / 2)
      .attr('y', d => y(d.time) - 10)
      .attr('text-anchor', 'middle')
      .attr('fill', '#4B5563')
      .text(d => `${d.time} sec`);
    
    // Add axes
    svg.append('g')
      .attr('transform', `translate(0,${height - margin.bottom})`)
      .call(d3.axisBottom(x))
      .selectAll('text')
      .attr('font-size', '12px');
    
    svg.append('g')
      .attr('transform', `translate(${margin.left},0)`)
      .call(d3.axisLeft(y).ticks(5))
      .selectAll('text')
      .attr('font-size', '12px');
    
    // Add y-axis label
    svg.append('text')
      .attr('transform', 'rotate(-90)')
      .attr('x', -(height / 2))
      .attr('y', 20)
      .attr('text-anchor', 'middle')
      .attr('fill', '#4B5563')
      .attr('font-size', '12px')
      .text('Loading Time (seconds)');
    
    // Add improvement percentage
    const improvement = ((data[0].time - data[1].time) / data[0].time * 100).toFixed(0);
    
    svg.append('text')
      .attr('x', width / 2)
      .attr('y', height - 10)
      .attr('text-anchor', 'middle')
      .attr('fill', '#4B5563')
      .attr('font-size', '14px')
      .attr('font-weight', 'bold')
      .text(`${improvement}% Improvement`);
  }
</script>

<!-- Data Volume Visualization script -->
<script is:inline>
  window.addEventListener('load', () => {
    console.log("Initializing Data Volume Visualization");
    createDataVolumeViz();
  });

  function createDataVolumeViz() {
    const container = document.getElementById('data-volume-viz');
    if (!container) {
      console.error("Data Volume container not found");
      return;
    }
    
    console.log("Data Volume container found:", container);
    
    // Clear loading message
    container.innerHTML = '';
    
    const width = container.clientWidth;
    const height = container.clientHeight;
    const margin = { top: 40, right: 30, bottom: 60, left: 80 };
    
    const svg = d3.select(container)
      .append('svg')
      .attr('width', width)
      .attr('height', height)
      .attr('viewBox', `0 0 ${width} ${height}`)
      .attr('style', 'max-width: 100%; height: auto;');
    
    // Sample data
    const data = [
      { project: 'CMS Website Governance', volume: 5.2 },
      { project: 'SBA Economic Impact', volume: 3.8 },
      { project: 'WOSB Analysis', volume: 2.5 },
      { project: 'Marketing Analytics', volume: 1.7 },
      { project: 'Vendor ETL Pipeline', volume: 0.9 }
    ];
    
    // Set up scales
    const x = d3.scaleBand()
      .domain(data.map(d => d.project))
      .range([margin.left, width - margin.right])
      .padding(0.3);
    
    const y = d3.scaleLinear()
      .domain([0, d3.max(data, d => d.volume) * 1.2])
      .range([height - margin.bottom, margin.top]);
    
    // Add bars
    svg.selectAll('.bar')
      .data(data)
      .enter()
      .append('rect')
      .attr('class', 'bar')
      .attr('x', d => x(d.project))
      .attr('y', d => y(d.volume))
      .attr('width', x.bandwidth())
      .attr('height', d => height - margin.bottom - y(d.volume))
      .attr('fill', '#60A5FA');
    
    // Add value labels
    svg.selectAll('.label')
      .data(data)
      .enter()
      .append('text')
      .attr('class', 'label')
      .attr('x', d => x(d.project) + x.bandwidth() / 2)
      .attr('y', d => y(d.volume) - 10)
      .attr('text-anchor', 'middle')
      .attr('fill', '#4B5563')
      .text(d => `${d.volume} TB`);
    
    // Add axes
    svg.append('g')
      .attr('transform', `translate(0,${height - margin.bottom})`)
      .call(d3.axisBottom(x))
      .selectAll('text')
      .attr('font-size', '10px')
      .attr('transform', 'rotate(-45)')
      .attr('text-anchor', 'end')
      .attr('dx', '-0.8em')
      .attr('dy', '0.15em');
    
    svg.append('g')
      .attr('transform', `translate(${margin.left},0)`)
      .call(d3.axisLeft(y).ticks(5))
      .selectAll('text')
      .attr('font-size', '12px');
    
    // Add y-axis label
    svg.append('text')
      .attr('transform', 'rotate(-90)')
      .attr('x', -(height / 2))
      .attr('y', 30)
      .attr('text-anchor', 'middle')
      .attr('fill', '#4B5563')
      .attr('font-size', '12px')
      .text('Data Volume (Terabytes)');
  }
</script>

<!-- Skills Radar Visualization script -->
<script is:inline>
  window.addEventListener('load', () => {
    console.log("Initializing Skills Radar Visualization");
    createSkillsRadarViz();
  });

  function createSkillsRadarViz() {
    const container = document.getElementById('skills-matrix-viz');
    if (!container) {
      console.error("Skills Radar container not found");
      return;
    }
    
    console.log("Skills Radar container found:", container);
    
    // Clear loading message
    container.innerHTML = '';
    
    const width = container.clientWidth;
    const height = container.clientHeight;
    const margin = 80;
    const radius = Math.min(width, height) / 2 - margin;
    
    const svg = d3.select(container)
      .append('svg')
      .attr('width', width)
      .attr('height', height)
      .attr('viewBox', `0 0 ${width} ${height}`)
      .attr('style', 'max-width: 100%; height: auto;')
      .append('g')
      .attr('transform', `translate(${width / 2}, ${height / 2})`);
    
    // Sample data
    const data = [
      { skill: 'Python', value: 0.9 },
      { skill: 'SQL', value: 0.85 },
      { skill: 'ETL', value: 0.8 },
      { skill: 'Data Modeling', value: 0.75 },
      { skill: 'Tableau', value: 0.85 },
      { skill: 'AWS', value: 0.7 },
      { skill: 'Spark', value: 0.65 },
      { skill: 'Statistical Analysis', value: 0.75 }
    ];
    
    // Number of axes
    const numAxes = data.length;
    const angleSlice = (Math.PI * 2) / numAxes;
    
    // Scale for the radius
    const rScale = d3.scaleLinear()
      .domain([0, 1])
      .range([0, radius]);
    
    // Create the straight lines radiating outward from the center
    const axis = svg.selectAll('.axis')
      .data(data)
      .enter()
      .append('g')
      .attr('class', 'axis');
    
    // Append the lines
    axis.append('line')
      .attr('x1', 0)
      .attr('y1', 0)
      .attr('x2', (d, i) => rScale(1.1) * Math.cos(angleSlice * i - Math.PI / 2))
      .attr('y2', (d, i) => rScale(1.1) * Math.sin(angleSlice * i - Math.PI / 2))
      .attr('class', 'line')
      .attr('stroke', '#CBD5E1')
      .attr('stroke-width', '1px');
    
    // Append the labels at each axis
    axis.append('text')
      .attr('class', 'legend')
      .attr('text-anchor', 'middle')
      .attr('dy', '0.35em')
      .attr('x', (d, i) => rScale(1.15) * Math.cos(angleSlice * i - Math.PI / 2))
      .attr('y', (d, i) => rScale(1.15) * Math.sin(angleSlice * i - Math.PI / 2))
      .text(d => d.skill)
      .attr('fill', '#4B5563')
      .attr('font-size', '12px');
    
    // Create the circular segments
    for (let j = 0; j < 5; j++) {
      const levelFactor = radius * (j / 5);
      
      // Create the circular segments
      svg.selectAll('.levels')
        .data(d3.range(1, (numAxes + 1)).map(i => i))
        .enter()
        .append('line')
        .attr('x1', (d, i) => levelFactor * Math.cos(angleSlice * i - Math.PI / 2))
        .attr('y1', (d, i) => levelFactor * Math.sin(angleSlice * i - Math.PI / 2))
        .attr('x2', (d, i) => levelFactor * Math.cos(angleSlice * ((i + 1) % numAxes) - Math.PI / 2))
        .attr('y2', (d, i) => levelFactor * Math.sin(angleSlice * ((i + 1) % numAxes) - Math.PI / 2))
        .attr('class', 'line')
        .attr('stroke', '#CBD5E1')
        .attr('stroke-width', '0.5px');
    }
    
    // Create the radar chart blobs
    const radarLine = d3.lineRadial()
      .curve(d3.curveLinearClosed)
      .radius(d => rScale(d.value))
      .angle((d, i) => i * angleSlice);
    
    // Create a wrapper for the blobs
    const blobWrapper = svg.append('g')
      .attr('class', 'radarWrapper');
    
    // Append the backgrounds
    blobWrapper.append('path')
      .datum(data)
      .attr('class', 'radarArea')
      .attr('d', radarLine)
      .attr('fill', '#3B82F6')
      .attr('fill-opacity', 0.2)
      .attr('stroke', '#3B82F6')
      .attr('stroke-width', 2);
    
    // Create the circles at each data point
    blobWrapper.selectAll('.radarCircle')
      .data(data)
      .enter()
      .append('circle')
      .attr('class', 'radarCircle')
      .attr('r', 5)
      .attr('cx', (d, i) => rScale(d.value) * Math.cos(angleSlice * i - Math.PI / 2))
      .attr('cy', (d, i) => rScale(d.value) * Math.sin(angleSlice * i - Math.PI / 2))
      .attr('fill', '#3B82F6')
      .attr('fill-opacity', 0.8);
    
    // Add value labels
    blobWrapper.selectAll('.radarValue')
      .data(data)
      .enter()
      .append('text')
      .attr('class', 'radarValue')
      .attr('x', (d, i) => rScale(d.value) * Math.cos(angleSlice * i - Math.PI / 2))
      .attr('y', (d, i) => rScale(d.value) * Math.sin(angleSlice * i - Math.PI / 2))
      .attr('dx', (d, i) => {
        const cos = Math.cos(angleSlice * i - Math.PI / 2);
        return cos > 0.1 ? 10 : cos < -0.1 ? -10 : 0;
      })
      .attr('dy', (d, i) => {
        const sin = Math.sin(angleSlice * i - Math.PI / 2);
        return sin > 0.1 ? 15 : sin < -0.1 ? -5 : 0;
      })
      .attr('text-anchor', (d, i) => {
        const cos = Math.cos(angleSlice * i - Math.PI / 2);
        return cos > 0.1 ? 'start' : cos < -0.1 ? 'end' : 'middle';
      })
      .text(d => `${(d.value * 100).toFixed(0)}%`)
      .attr('fill', '#4B5563')
      .attr('font-size', '10px');
  }
</script>

<!-- Performance Optimization Line Chart script -->
<script is:inline>
  window.addEventListener('load', () => {
    console.log("Initializing Performance Optimization Chart");
    createPerformanceChart();
    
    // Add event listener for metric selector
    document.getElementById('performance-metric-selector').addEventListener('change', function() {
      createPerformanceChart(this.value);
    });
  });

  function createPerformanceChart(metricType = 'runtime') {
    const container = document.getElementById('performance-chart');
    if (!container) {
      console.error("Performance chart container not found");
      return;
    }
    
    console.log("Performance chart container found:", container);
    
    // Clear loading message
    container.innerHTML = '';
    
    const width = container.clientWidth;
    const height = container.clientHeight;
    const margin = { top: 50, right: 50, bottom: 70, left: 60 };
    
    const svg = d3.select(container)
      .append('svg')
      .attr('width', width)
      .attr('height', height)
      .attr('viewBox', `0 0 ${width} ${height}`)
      .attr('style', 'max-width: 100%; height: auto;');
    
    // Sample data for different metrics
    const metricsData = {
      runtime: [
        { date: "2023-01", value: 100, label: "Initial Implementation" },
        { date: "2023-02", value: 95, label: "" },
        { date: "2023-03", value: 90, label: "Query Optimization" },
        { date: "2023-04", value: 85, label: "" },
        { date: "2023-05", value: 75, label: "Data Partitioning" },
        { date: "2023-06", value: 70, label: "Spark Optimization" }
      ],
      cpu: [
        { date: "2023-01", value: 85, label: "Initial Implementation" },
        { date: "2023-02", value: 80, label: "" },
        { date: "2023-03", value: 75, label: "Resource Allocation" },
        { date: "2023-04", value: 65, label: "" },
        { date: "2023-05", value: 60, label: "Parallel Processing" },
        { date: "2023-06", value: 50, label: "Cluster Optimization" }
      ],
      memory: [
        { date: "2023-01", value: 90, label: "Initial Implementation" },
        { date: "2023-02", value: 85, label: "" },
        { date: "2023-03", value: 80, label: "Memory Management" },
        { date: "2023-04", value: 75, label: "" },
        { date: "2023-05", value: 65, label: "Caching Strategy" },
        { date: "2023-06", value: 55, label: "Resource Optimization" }
      ],
      cost: [
        { date: "2023-01", value: 100, label: "Initial Implementation" },
        { date: "2023-02", value: 90, label: "" },
        { date: "2023-03", value: 85, label: "Resource Optimization" },
        { date: "2023-04", value: 75, label: "" },
        { date: "2023-05", value: 65, label: "Spot Instances" },
        { date: "2023-06", value: 60, label: "Serverless Architecture" }
      ]
    };
    
    // Get data for selected metric
    const data = metricsData[metricType];
    
    // Update insight text based on metric
    updateInsightText(metricType);
    
    // Set up scales
    const x = d3.scaleBand()
      .domain(data.map(d => d.date))
      .range([margin.left, width - margin.right])
      .padding(0.1);
    
    const y = d3.scaleLinear()
      .domain([0, d3.max(data, d => d.value) * 1.1])
      .range([height - margin.bottom, margin.top]);
    
    // Add gridlines
    svg.append('g')
      .attr('class', 'grid')
      .attr('transform', `translate(0,${height - margin.bottom})`)
      .call(d3.axisBottom(x)
        .tickSize(-(height - margin.top - margin.bottom))
        .tickFormat('')
      )
      .attr('stroke-opacity', 0.1);
    
    svg.append('g')
      .attr('class', 'grid')
      .attr('transform', `translate(${margin.left},0)`)
      .call(d3.axisLeft(y)
        .tickSize(-(width - margin.left - margin.right))
        .tickFormat('')
      )
      .attr('stroke-opacity', 0.1);
    
    // Add axes
    svg.append('g')
      .attr('transform', `translate(0,${height - margin.bottom})`)
      .call(d3.axisBottom(x))
      .selectAll('text')
      .attr('font-size', '12px')
      .attr('transform', 'rotate(-45)')
      .attr('text-anchor', 'end')
      .attr('dx', '-0.8em')
      .attr('dy', '0.15em');
    
    svg.append('g')
      .attr('transform', `translate(${margin.left},0)`)
      .call(d3.axisLeft(y).ticks(5))
      .selectAll('text')
      .attr('font-size', '12px');
    
    // Add y-axis label
    svg.append('text')
      .attr('transform', 'rotate(-90)')
      .attr('x', -(height / 2))
      .attr('y', 20)
      .attr('text-anchor', 'middle')
      .attr('fill', '#4B5563')
      .attr('font-size', '12px')
      .text(getMetricLabel(metricType));
    
    // Create line generator
    const line = d3.line()
      .x(d => x(d.date) + x.bandwidth() / 2)
      .y(d => y(d.value))
      .curve(d3.curveMonotoneX);
    
    // Add the line path
    const path = svg.append('path')
      .datum(data)
      .attr('fill', 'none')
      .attr('stroke', '#4B5E6D')
      .attr('stroke-width', 3)
      .attr('d', line);
    
    // Animate the line
    const pathLength = path.node().getTotalLength();
    path
      .attr('stroke-dasharray', pathLength)
      .attr('stroke-dashoffset', pathLength)
      .transition()
      .duration(1500)
      .attr('stroke-dashoffset', 0);
    
    // Add data points
    svg.selectAll('.data-point')
      .data(data)
      .enter()
      .append('circle')
      .attr('class', 'data-point')
      .attr('cx', d => x(d.date) + x.bandwidth() / 2)
      .attr('cy', d => y(d.value))
      .attr('r', 5)
      .attr('fill', '#4B5E6D')
      .attr('stroke', '#fff')
      .attr('stroke-width', 2)
      .style('opacity', 0)
      .transition()
      .delay((d, i) => i * 150)
      .duration(500)
      .style('opacity', 1);
    
    // Add annotations for important points
    data.forEach((d, i) => {
      if (d.label) {
        // Add annotation line
        svg.append('line')
          .attr('x1', x(d.date) + x.bandwidth() / 2)
          .attr('y1', y(d.value) - 8)
          .attr('x2', x(d.date) + x.bandwidth() / 2)
          .attr('y2', y(d.value) - 30)
          .attr('stroke', '#2ECC71')
          .attr('stroke-width', 2)
          .attr('stroke-dasharray', '3,3')
          .style('opacity', 0)
          .transition()
          .delay(1000 + i * 150)
          .duration(500)
          .style('opacity', 1);
        
        // Add annotation text
        svg.append('text')
          .attr('x', x(d.date) + x.bandwidth() / 2)
          .attr('y', y(d.value) - 35)
          .attr('text-anchor', 'middle')
          .attr('font-size', '12px')
          .attr('fill', '#2ECC71')
          .attr('font-weight', 'bold')
          .text(d.label)
          .style('opacity', 0)
          .transition()
          .delay(1000 + i * 150)
          .duration(500)
          .style('opacity', 1);
      }
    });
    
    // Add tooltips
    const tooltip = d3.select(container)
      .append('div')
      .attr('class', 'tooltip')
      .style('position', 'absolute')
      .style('visibility', 'hidden')
      .style('background-color', 'white')
      .style('border', '1px solid #ddd')
      .style('border-radius', '4px')
      .style('padding', '10px')
      .style('box-shadow', '0 2px 4px rgba(0,0,0,0.1)')
      .style('font-size', '12px')
      .style('z-index', '10');
    
    // Add tooltip behavior
    svg.selectAll('.data-point')
      .on('mouseover', function(event, d) {
        d3.select(this)
          .attr('r', 7)
          .attr('fill', '#2ECC71');
        
        tooltip
          .style('visibility', 'visible')
          .html(`
            <strong>${formatDate(d.date)}</strong><br/>
            ${getMetricLabel(metricType)}: ${d.value}${getMetricUnit(metricType)}
            ${d.label ? `<br/><span style="color: #2ECC71">${d.label}</span>` : ''}
          `);
      })
      .on('mousemove', function(event) {
        tooltip
          .style('top', (event.pageY - 10) + 'px')
          .style('left', (event.pageX + 10) + 'px');
      })
      .on('mouseout', function() {
        d3.select(this)
          .attr('r', 5)
          .attr('fill', '#4B5E6D');
        
        tooltip.style('visibility', 'hidden');
      });
    
    // Helper function to format date
    function formatDate(dateStr) {
      const [year, month] = dateStr.split('-');
      const date = new Date(parseInt(year), parseInt(month) - 1);
      return date.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });
    }
    
    // Helper function to get metric label
    function getMetricLabel(metric) {
      switch(metric) {
        case 'runtime':
          return 'Query Runtime (ms)';
        case 'cpu':
          return 'CPU Usage (%)';
        case 'memory':
          return 'Memory Consumption (%)';
        case 'cost':
          return 'Cost Efficiency (%)';
        default:
          return 'Value';
      }
    }
    
    // Helper function to get metric unit
    function getMetricUnit(metric) {
      switch(metric) {
        case 'runtime':
          return ' ms';
        case 'cpu':
        case 'memory':
        case 'cost':
          return '%';
        default:
          return '';
      }
    }
    
    // Helper function to update insight text
    function updateInsightText(metric) {
      const insightElement = document.getElementById('optimization-insight');
      if (!insightElement) return;
      
      const insights = {
        runtime: "The implementation of advanced query optimization techniques and data partitioning strategies resulted in a 30% reduction in query runtime, significantly improving user experience and reducing infrastructure costs.",
        cpu: "Through resource allocation optimization and parallel processing implementation, CPU usage was reduced by 35%, allowing for more efficient utilization of computing resources and improved scalability.",
        memory: "Memory consumption was reduced by 39% through improved caching strategies and resource optimization, enabling the system to handle larger datasets without performance degradation.",
        cost: "By implementing spot instances and transitioning to a serverless architecture, cost efficiency improved by 40%, resulting in significant operational savings while maintaining performance."
      };
      
      insightElement.textContent = insights[metric];
    }
  }
</script>

<!-- Data Volume Analysis Stacked Bar Chart script -->
<script is:inline>
  window.addEventListener('load', () => {
    console.log("Initializing Data Volume Analysis Chart");
    createDataVolumeChart();
  });

  function createDataVolumeChart() {
    const container = document.getElementById('data-volume-viz');
    if (!container) {
      console.error("Data volume chart container not found");
      return;
    }
    
    console.log("Data volume chart container found:", container);
    
    // Clear loading message
    container.innerHTML = '';
    
    const width = container.clientWidth;
    const height = container.clientHeight;
    const margin = { top: 40, right: 30, bottom: 90, left: 80 };
    
    const svg = d3.select(container)
      .append('svg')
      .attr('width', width)
      .attr('height', height)
      .attr('viewBox', `0 0 ${width} ${height}`)
      .attr('style', 'max-width: 100%; height: auto;');
    
    // Sample data for projects
    const data = [
      { project: 'CMS Website Governance', structured: 3.5, unstructured: 1.7, description: "Unified content management system with analytics integration" },
      { project: 'SBA Economic Impact', structured: 2.8, unstructured: 1.0, description: "Economic data analysis for small business administration" },
      { project: 'Healthcare Analytics', structured: 2.2, unstructured: 1.3, description: "Patient outcome prediction and resource optimization" },
      { project: 'Retail Inventory', structured: 1.5, unstructured: 0.8, description: "Real-time inventory tracking and demand forecasting" },
      { project: 'Financial Services', structured: 1.0, unstructured: 0.3, description: "Transaction monitoring and fraud detection system" }
    ];
    
    // Calculate total volume for summary
    const totalVolume = data.reduce((sum, d) => sum + d.structured + d.unstructured, 0);
    document.getElementById('data-volume-summary').textContent = `Total Processed: ${totalVolume.toFixed(1)} TB`;
    
    // Set up scales
    const x = d3.scaleBand()
      .domain(data.map(d => d.project))
      .range([margin.left, width - margin.right])
      .padding(0.3);
    
    const y = d3.scaleLinear()
      .domain([0, d3.max(data, d => d.structured + d.unstructured) * 1.1])
      .range([height - margin.bottom, margin.top]);
    
    // Add gridlines
    svg.append('g')
      .attr('class', 'grid')
      .attr('transform', `translate(${margin.left},0)`)
      .call(d3.axisLeft(y)
        .tickSize(-(width - margin.left - margin.right))
        .tickFormat('')
      )
      .attr('stroke-opacity', 0.1);
    
    // Create stacked data
    const stackedData = data.map(d => [
      { project: d.project, type: 'structured', value: d.structured, y0: 0, y1: d.structured, description: d.description },
      { project: d.project, type: 'unstructured', value: d.unstructured, y0: d.structured, y1: d.structured + d.unstructured, description: d.description }
    ]).flat();
    
    // Add bars
    const bars = svg.selectAll('.bar')
      .data(stackedData)
      .enter()
      .append('rect')
      .attr('class', 'bar')
      .attr('x', d => x(d.project))
      .attr('y', d => y(d.y1))
      .attr('width', x.bandwidth())
      .attr('height', d => y(d.y0) - y(d.y1))
      .attr('fill', d => d.type === 'structured' ? '#3498DB' : '#95A5A6')
      .attr('opacity', 0)
      .on('mouseover', function(event, d) {
        d3.select(this)
          .attr('opacity', 1)
          .attr('stroke', '#333')
          .attr('stroke-width', 1);
        
        tooltip
          .style('visibility', 'visible')
          .html(`
            <strong>${d.project}</strong><br/>
            <span style="color: ${d.type === 'structured' ? '#3498DB' : '#95A5A6'}">
              ${d.type === 'structured' ? 'Structured' : 'Unstructured'} Data: ${d.value} TB
            </span><br/>
            <small>${d.description}</small>
          `);
      })
      .on('mousemove', function(event) {
        tooltip
          .style('top', (event.pageY - 10) + 'px')
          .style('left', (event.pageX + 10) + 'px');
      })
      .on('mouseout', function() {
        d3.select(this)
          .attr('opacity', 0.9)
          .attr('stroke', 'none');
        
        tooltip.style('visibility', 'hidden');
      });
    
    // Animate bars
    bars.transition()
      .duration(1000)
      .delay((d, i) => i * 50)
      .attr('opacity', 0.9);
    
    // Add axes
    svg.append('g')
      .attr('transform', `translate(0,${height - margin.bottom})`)
      .call(d3.axisBottom(x))
      .selectAll('text')
      .attr('font-size', '10px')
      .attr('transform', 'rotate(-45)')
      .attr('text-anchor', 'end')
      .attr('dx', '-0.8em')
      .attr('dy', '0.15em');
    
    svg.append('g')
      .attr('transform', `translate(${margin.left},0)`)
      .call(d3.axisLeft(y).ticks(5))
      .selectAll('text')
      .attr('font-size', '12px');
    
    // Add y-axis label
    svg.append('text')
      .attr('transform', 'rotate(-90)')
      .attr('x', -(height / 2))
      .attr('y', 30)
      .attr('text-anchor', 'middle')
      .attr('fill', '#4B5563')
      .attr('font-size', '12px')
      .text('Data Volume (Terabytes)');
    
    // Add value labels
    svg.selectAll('.value-label')
      .data(data)
      .enter()
      .append('text')
      .attr('class', 'value-label')
      .attr('x', d => x(d.project) + x.bandwidth() / 2)
      .attr('y', d => y(d.structured + d.unstructured) - 10)
      .attr('text-anchor', 'middle')
      .attr('fill', '#4B5563')
      .attr('font-size', '10px')
      .attr('font-weight', 'bold')
      .text(d => `${(d.structured + d.unstructured).toFixed(1)} TB`)
      .attr('opacity', 0)
      .transition()
      .duration(1000)
      .delay((d, i) => i * 50 + 500)
      .attr('opacity', 1);
    
    // Add tooltip
    const tooltip = d3.select(container)
      .append('div')
      .attr('class', 'tooltip')
      .style('position', 'absolute')
      .style('visibility', 'hidden')
      .style('background-color', 'white')
      .style('border', '1px solid #ddd')
      .style('border-radius', '4px')
      .style('padding', '10px')
      .style('box-shadow', '0 2px 4px rgba(0,0,0,0.1)')
      .style('font-size', '12px')
      .style('max-width', '200px')
      .style('z-index', '10');
  }
</script>

<!-- Technical Expertise Skill Matrix script -->
<script is:inline>
  window.addEventListener('load', () => {
    console.log("Initializing Technical Expertise Skill Matrix");
    createSkillMatrix();
    
    // Add event listener for category filter
    document.getElementById('skill-category-filter').addEventListener('change', function() {
      createSkillMatrix(this.value);
    });
  });

  function createSkillMatrix(category = 'all') {
    const container = document.getElementById('skills-matrix-viz');
    if (!container) {
      console.error("Skills matrix container not found");
      return;
    }
    
    console.log("Skills matrix container found:", container);
    
    // Clear loading message
    container.innerHTML = '';
    
    const width = container.clientWidth;
    const height = container.clientHeight;
    const margin = { top: 40, right: 30, bottom: 40, left: 150 };
    
    const svg = d3.select(container)
      .append('svg')
      .attr('width', width)
      .attr('height', height)
      .attr('viewBox', `0 0 ${width} ${height}`)
      .attr('style', 'max-width: 100%; height: auto;');
    
    // Sample data for skills
    const allSkills = [
      { skill: "Python", category: "programming", level: "expert", description: "Built ETL pipelines and data processing systems" },
      { skill: "SQL", category: "programming", level: "expert", description: "Complex queries, performance optimization, data modeling" },
      { skill: "JavaScript", category: "programming", level: "advanced", description: "Interactive dashboards and data visualizations" },
      { skill: "Scala", category: "programming", level: "intermediate", description: "Spark applications for distributed processing" },
      { skill: "Java", category: "programming", level: "intermediate", description: "Enterprise data applications and APIs" },
      
      { skill: "AWS", category: "cloud", level: "advanced", description: "S3, EC2, Lambda, Glue, Redshift, EMR" },
      { skill: "Azure", category: "cloud", level: "advanced", description: "Data Factory, Synapse, Databricks, Functions" },
      { skill: "GCP", category: "cloud", level: "intermediate", description: "BigQuery, Dataflow, Cloud Storage" },
      { skill: "Kubernetes", category: "cloud", level: "intermediate", description: "Container orchestration for data services" },
      { skill: "Terraform", category: "cloud", level: "advanced", description: "Infrastructure as code for data platforms" },
      
      { skill: "Spark", category: "data", level: "expert", description: "Large-scale data processing and analytics" },
      { skill: "Airflow", category: "data", level: "expert", description: "Workflow orchestration and scheduling" },
      { skill: "Kafka", category: "data", level: "advanced", description: "Real-time data streaming and event processing" },
      { skill: "Snowflake", category: "data", level: "advanced", description: "Cloud data warehousing and analytics" },
      { skill: "dbt", category: "data", level: "advanced", description: "Data transformation and modeling" },
      { skill: "Databricks", category: "data", level: "advanced", description: "Unified analytics platform" },
      { skill: "Delta Lake", category: "data", level: "intermediate", description: "Reliable data lake implementation" },
      
      { skill: "TensorFlow", category: "ai", level: "intermediate", description: "Deep learning models for predictive analytics" },
      { skill: "PyTorch", category: "ai", level: "intermediate", description: "Neural networks for data analysis" },
      { skill: "scikit-learn", category: "ai", level: "advanced", description: "Machine learning algorithms for data insights" },
      { skill: "NLP", category: "ai", level: "intermediate", description: "Text processing and sentiment analysis" },
      { skill: "Computer Vision", category: "ai", level: "beginner", description: "Image recognition for data extraction" }
    ];
    
    // Filter skills by category if needed
    const skills = category === 'all' ? allSkills : allSkills.filter(d => d.category === category);
    
    // Define level values
    const levelValues = {
      "beginner": 1,
      "intermediate": 2,
      "advanced": 3,
      "expert": 4
    };
    
    // Define level colors
    const levelColors = {
      "beginner": "#AED6F1",
      "intermediate": "#3498DB",
      "advanced": "#2874A6",
      "expert": "#1A5276"
    };
    
    // Set up scales
    const y = d3.scaleBand()
      .domain(skills.map(d => d.skill))
      .range([margin.top, height - margin.bottom])
      .padding(0.1);
    
    const x = d3.scaleBand()
      .domain(["beginner", "intermediate", "advanced", "expert"])
      .range([margin.left, width - margin.right])
      .padding(0.1);
    
    // Add skill labels
    svg.selectAll('.skill-label')
      .data(skills)
      .enter()
      .append('text')
      .attr('class', 'skill-label')
      .attr('x', margin.left - 10)
      .attr('y', d => y(d.skill) + y.bandwidth() / 2)
      .attr('text-anchor', 'end')
      .attr('dominant-baseline', 'middle')
      .attr('fill', '#4B5563')
      .attr('font-size', '12px')
      .text(d => d.skill);
    
    // Add level labels
    svg.selectAll('.level-label')
      .data(["Beginner", "Intermediate", "Advanced", "Expert"])
      .enter()
      .append('text')
      .attr('class', 'level-label')
      .attr('x', (d, i) => x(d.toLowerCase()) + x.bandwidth() / 2)
      .attr('y', margin.top - 15)
      .attr('text-anchor', 'middle')
      .attr('fill', '#4B5563')
      .attr('font-size', '12px')
      .text(d => d);
    
    // Add skill cells
    const cells = svg.selectAll('.skill-cell')
      .data(skills)
      .enter()
      .append('g')
      .attr('class', 'skill-cell');
    
    // Add background cells for all levels
    skills.forEach(skill => {
      ["beginner", "intermediate", "advanced", "expert"].forEach(level => {
        svg.append('rect')
          .attr('x', x(level))
          .attr('y', y(skill.skill))
          .attr('width', x.bandwidth())
          .attr('height', y.bandwidth())
          .attr('fill', '#F3F4F6')
          .attr('stroke', '#E5E7EB')
          .attr('stroke-width', 1)
          .attr('rx', 4);
      });
    });
    
    // Add colored cells for skill levels
    cells.append('rect')
      .attr('x', d => x(d.level))
      .attr('y', d => y(d.skill))
      .attr('width', x.bandwidth())
      .attr('height', y.bandwidth())
      .attr('fill', d => levelColors[d.level])
      .attr('stroke', '#fff')
      .attr('stroke-width', 1)
      .attr('rx', 4)
      .attr('opacity', 0)
      .transition()
      .duration(800)
      .delay((d, i) => i * 30)
      .attr('opacity', 0.9);
    
    // Add tooltip
    const tooltip = d3.select(container)
      .append('div')
      .attr('class', 'tooltip')
      .style('position', 'absolute')
      .style('visibility', 'hidden')
      .style('background-color', 'white')
      .style('border', '1px solid #ddd')
      .style('border-radius', '4px')
      .style('padding', '10px')
      .style('box-shadow', '0 2px 4px rgba(0,0,0,0.1)')
      .style('font-size', '12px')
      .style('max-width', '250px')
      .style('z-index', '10');
    
    // Add tooltip behavior
    cells.selectAll('rect')
      .on('mouseover', function(event, d) {
        d3.select(this)
          .attr('stroke', '#333')
          .attr('stroke-width', 2);
        
        tooltip
          .style('visibility', 'visible')
          .html(`
            <strong>${d.skill}</strong> (${d.level.charAt(0).toUpperCase() + d.level.slice(1)})<br/>
            <span style="color: #4B5563">${d.description}</span><br/>
            <small style="color: #6B7280">Category: ${d.category.charAt(0).toUpperCase() + d.category.slice(1)}</small>
          `);
      })
      .on('mousemove', function(event) {
        tooltip
          .style('top', (event.pageY - 10) + 'px')
          .style('left', (event.pageX + 10) + 'px');
      })
      .on('mouseout', function() {
        d3.select(this)
          .attr('stroke', '#fff')
          .attr('stroke-width', 1);
        
        tooltip.style('visibility', 'hidden');
      });
    
    // Add category labels
    if (category === 'all') {
      const categories = [...new Set(skills.map(d => d.category))];
      const categoryPositions = {};
      
      categories.forEach(cat => {
        const catSkills = skills.filter(d => d.category === cat);
        const firstSkill = catSkills[0].skill;
        const lastSkill = catSkills[catSkills.length - 1].skill;
        const yPos = y(firstSkill);
        const height = y(lastSkill) + y.bandwidth() - yPos;
        
        categoryPositions[cat] = {
          y: yPos,
          height: height
        };
        
        // Add category background
        svg.append('rect')
          .attr('x', 0)
          .attr('y', yPos)
          .attr('width', margin.left - 5)
          .attr('height', height)
          .attr('fill', getCategoryColor(cat))
          .attr('opacity', 0.1);
        
        // Add category label
        svg.append('text')
          .attr('x', 10)
          .attr('y', yPos + height / 2)
          .attr('dominant-baseline', 'middle')
          .attr('fill', '#4B5563')
          .attr('font-size', '14px')
          .attr('font-weight', 'bold')
          .text(cat.charAt(0).toUpperCase() + cat.slice(1));
      });
    }
    
    // Helper function to get category color
    function getCategoryColor(category) {
      const colors = {
        "programming": "#3498DB",
        "cloud": "#9B59B6",
        "data": "#2ECC71",
        "ai": "#E74C3C"
      };
      
      return colors[category] || "#4B5563";
    }
  }
</script>

<!-- AI-Driven Feature: RAG-Powered Q&A -->
<!-- The component is loaded via the Astro integration, no additional script needed -->

<style>
  /* Animation for the data flow lines in the hero section */
  .data-flow-line {
    animation: flow 3s infinite;
  }

  @keyframes flow {
    0% {
      stroke-dasharray: 1000;
      stroke-dashoffset: 1000;
    }
    100% {
      stroke-dasharray: 1000;
      stroke-dashoffset: 0;
    }
  }

  /* Smooth scrolling for the page */
  html {
    scroll-behavior: smooth;
  }
</style> 