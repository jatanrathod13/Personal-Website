---
import Layout from '../layouts/Layout.astro'
---

<Layout title="OpenAI API Test">
  <main class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-6">OpenAI API Integration Test</h1>
    
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 mb-8">
      <h2 class="text-2xl font-bold mb-4">Environment Variables Test</h2>
      <p class="mb-4">This test checks if your environment variables are properly configured.</p>
      <button id="testEnvBtn" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors duration-300">
        Test Environment Variables
      </button>
      <div id="envResults" class="mt-4 p-4 bg-gray-100 dark:bg-gray-700 rounded-lg hidden">
        <pre id="envOutput" class="whitespace-pre-wrap"></pre>
      </div>
    </div>
    
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 mb-8">
      <h2 class="text-2xl font-bold mb-4">OpenAI API Test</h2>
      <p class="mb-4">This test checks if your OpenAI API integration is working correctly.</p>
      <button id="testApiBtn" class="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors duration-300">
        Test OpenAI API
      </button>
      <div id="apiResults" class="mt-4 p-4 bg-gray-100 dark:bg-gray-700 rounded-lg hidden">
        <pre id="apiOutput" class="whitespace-pre-wrap"></pre>
      </div>
    </div>
    
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6">
      <h2 class="text-2xl font-bold mb-4">Manual API Test</h2>
      <p class="mb-4">Send a custom message to the OpenAI API.</p>
      <form id="apiForm" class="space-y-4">
        <div>
          <label for="message" class="block mb-2">Message:</label>
          <textarea 
            id="message" 
            class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white"
            rows="3"
            placeholder="Enter your message here..."
          ></textarea>
        </div>
        <button type="submit" class="px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors duration-300">
          Send Message
        </button>
      </form>
      <div id="formResults" class="mt-4 p-4 bg-gray-100 dark:bg-gray-700 rounded-lg hidden">
        <div class="mb-2 font-bold">Response:</div>
        <pre id="formOutput" class="whitespace-pre-wrap"></pre>
      </div>
    </div>
  </main>
</Layout>

<script>
  // Function to display results
  function displayResults(elementId: string, data: any, isError = false) {
    const resultsElement = document.getElementById(elementId);
    const outputElement = document.getElementById(`${elementId.replace('Results', 'Output')}`);
    
    if (resultsElement && outputElement) {
      resultsElement.classList.remove('hidden');
      
      if (isError) {
        outputElement.classList.add('text-red-500');
        outputElement.textContent = typeof data === 'string' ? data : JSON.stringify(data, null, 2);
      } else {
        outputElement.classList.remove('text-red-500');
        outputElement.textContent = typeof data === 'string' ? data : JSON.stringify(data, null, 2);
      }
    }
  }
  
  // Test environment variables
  document.getElementById('testEnvBtn')?.addEventListener('click', async () => {
    try {
      const response = await fetch('/api/env-test');
      const data = await response.json();
      displayResults('envResults', data);
    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      displayResults('envResults', `Error: ${errorMessage}`, true);
    }
  });
  
  // Test OpenAI API
  document.getElementById('testApiBtn')?.addEventListener('click', async () => {
    try {
      const response = await fetch('/api/test-openai');
      
      if (!response.ok) {
        let errorData;
        try {
          errorData = await response.json();
        } catch (e) {
          errorData = { error: await response.text() };
        }
        throw new Error(`API Error (${response.status}): ${JSON.stringify(errorData)}`);
      }
      
      const data = await response.json();
      displayResults('apiResults', data);
    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      displayResults('apiResults', `Error: ${errorMessage}`, true);
    }
  });
  
  // Handle form submission
  document.getElementById('apiForm')?.addEventListener('submit', async (event) => {
    event.preventDefault();
    
    const messageInput = document.getElementById('message') as HTMLTextAreaElement;
    const message = messageInput?.value.trim();
    
    if (!message) {
      displayResults('formResults', 'Please enter a message', true);
      return;
    }
    
    try {
      const response = await fetch('/api/openai', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          messages: [{ role: 'user', content: message }],
        }),
      });
      
      if (!response.ok) {
        let errorData;
        try {
          errorData = await response.json();
        } catch (e) {
          errorData = { error: await response.text() };
        }
        throw new Error(`API Error (${response.status}): ${JSON.stringify(errorData)}`);
      }
      
      const data = await response.json();
      displayResults('formResults', data);
    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      displayResults('formResults', `Error: ${errorMessage}`, true);
    }
  });
</script> 